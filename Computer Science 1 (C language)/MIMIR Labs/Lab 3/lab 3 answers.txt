1 2 3 4 5

=================================================================

#include <stdio.h>

int crazySum(int n);
int power(int a, int b);

int main(void) {
  int answer = crazySum(3);

  printf("%d", answer);
  
  return 0;
}

int crazySum(int n)
{
  if(n == 0)
  {
    return 1;
  }
  else
  {
    return power(n, n) + crazySum((n-1));
  }
}

int power(int a, int b)
{
  if(b == 0)
  {
    return 1;
  }
  else
  {
    return a * power(a, b-1);
  }
}

=================================================================

#include <stdio.h>

int question3(int a, int b);

int main(void) {
  int answer = question3(10, 101);

  printf("%d", answer);
  
  return 0;
}

int question3(int a, int b)
{
  if (a == 0) return b;
  if (b == 0) return a;
  return question3(10*a+b%10, b/10);
}

=================================================================



=================================================================

#include <stdio.h>

int zeroes(int n);

int main(void) {
  int answer = zeroes(25);

  printf("%d", answer);
  
  return 0;
}

int zeroes(int n)
{
  if(n == 0)
  {
    return 0;
  }
  else
  {
    return (n/5 + zeroes(n/5));
  }

  /*
  int res = 0;
  while (n!=0)
  {
    res  += n/5;
    n /= 5;
  }
    return res;
  */
}

=================================================================

#include <stdio.h>

int productDigits(int n);

int main(void) {
  int answer = productDigits(243);

  printf("%d", answer);
  
  return 0;
}

int productDigits(int n)
{
  if(n == 0)
  {
    return 1; //return 1 for multiplication...
  }
  else
  {
    return n%10 * productDigits((n-n%10)/10);
    //n%10 will get last digit...
    //need to subtract last digit from n...
    //need to divide n by 10 to remove last digit from n...
  }
}

=================================================================

#include <stdio.h>

int weightedSum(int numbers[], int n);

int main(void) {
  int n = 3;
  int array[3] = {5, 2, 6};
  int answer = weightedSum(array, n);

  printf("%d", answer);
  
  return 0;
}

int weightedSum(int numbers[], int n)
{
  if(n == 0)
  {
    return 0; //add 0...
  }
  else
  {
    return numbers[n-1] * n + weightedSum(numbers, n-1);
    //arrays start at index 0, so use numbers[n-1] to equal n...
    //multiply current array index with n, then add previous index...
    //previous index will use the same array, with index n-1...
    //function will continue adding previous array elements until 0...
  }
}

=================================================================



=================================================================